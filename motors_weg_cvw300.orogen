name 'motors_weg_cvw300'

import_types_from 'std'
import_types_from 'base'

using_library 'motors_weg_cvw300'
import_types_from 'motors_weg_cvw300/Configuration.hpp'
import_types_from 'motors_weg_cvw300/InverterTemperatures.hpp'

import_types_from 'motors_weg_cvw300Types.hpp'

using_task_library 'iodrivers_base'

task_context 'Task', subclasses: 'iodrivers_base::Task' do
    needs_configuration

    # The device address on the RS485 bus
    property 'address', 'int', 1

    # Update period for the temperature output
    property 'temperature_period', '/base/Time'

    # Configure the internal watchdog
    property 'watchdog', '/motors_weg_cvw300/configuration/SerialWatchdog'

    # Acceleration and deceleration ramps
    property 'ramps', '/motors_weg_cvw300/configuration/Ramps'

    # How the motor is being controlled
    property 'control_type',
             '/motors_weg_cvw300/configuration/ControlType', :CONTROL_ENCODER

    # Modbus interframe delay
    #
    # The default value (20ms) is way bigger than the modbus-mandated standard
    # (~ 1ms at 57600 bauds). It is however known to work for non-realtime,
    # USB-wiedling setups. Tune this to lower values if you have a better
    # setup (and know what you are doing)
    property 'modbus_interframe_delay', '/base/Time'

    property 'limits', '/base/JointLimits'

    input_port 'cmd_in', '/base/commands/Joints'

    output_port 'joint_samples', '/base/samples/Joints'

    output_port 'temperatures', '/motors_weg_cvw300/InverterTemperatures'

    output_port 'inverter_state', '/motors_weg_cvw300/InverterState'

    exception_states 'INVALID_COMMAND_SIZE', 'INVALID_COMMAND_PARAMETER'
end
